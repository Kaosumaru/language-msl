'fileTypes': [
  'msl'
]
'name': 'MSL'
'patterns': [
  {
    'include': '#comments'
  }
  {
    'include': '#value'
  }
]
'repository':
  'array':
    'begin': '\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.array.begin.json'
    'end': '\\]'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.array.end.json'
    'name': 'meta.structure.array.json'
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'include': '#value'
      }
      {
        'match': ','
        'name': 'punctuation.separator.array.json'
      }
      {
        'match': '[^\\s\\]]'
        'name': 'invalid.illegal.expected-array-separator.json'
      }
    ]
  'constant':
    'match': '\\b(?:true|false|null)\\b'
    'name': 'constant.language.json'
  'number':
    'comment': 'handles integer and decimal numbers'
    'match': '-?(?=[1-9]|0(?!\\d))\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\%?'
    'name': 'constant.numeric.json'

  'named_value':
    'begin': '([a-zA-Z])([a-zA-Z0-9\\.]|\\(|\\))*\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.dictionary.begin.json'
    'comment': 'a JSON object'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.dictionary.end.json'
    'name': 'meta.structure.dictionary.json'
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'comment': 'the JSON object key'
        'include': '#string'
      }
      {
        'comment': 'end of value is a)comma b) } c) new key (currently implemented sort of wrong, and doesnt work if its at start of line)'
        'begin': ':'
        'beginCaptures':
          '0':
            'name': 'punctuation.separator.dictionary.key-value.json'
        'end': '(,)|(?=\\})|(?=[^:\\s]+(\\s)*:)'
        'endCaptures':
          '1':
            'name': 'punctuation.separator.dictionary.pair.json'
        'name': 'meta.structure.dictionary.value.json'
        'patterns': [
          {
            'include': '#comments'
          }
          {
            'comment': 'the JSON object value'
            'include': '#value'
          }

        ]
      }
      {
        'match': '[^\\s\\}]'
        'name': 'invalid.illegal.expected-dictionary-separator.json'
      }

    ]


  'object':
    'begin': '\\{'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.dictionary.begin.json'
    'comment': 'a JSON object'
    'end': '\\}'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.dictionary.end.json'
    'name': 'meta.structure.dictionary.json'
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'comment': 'the JSON object key'
        'include': '#string'
      }
      {
        'comment': 'end of value is a)comma b) } c) new key (currently implemented sort of wrong, and doesnt work if its at start of line)'
        'begin': ':'
        'beginCaptures':
          '0':
            'name': 'punctuation.separator.dictionary.key-value.json'
        'end': '(,)|(?=\\})|(?=[^:\\s]+(\\s)*:)'
        'endCaptures':
          '1':
            'name': 'punctuation.separator.dictionary.pair.json'
        'name': 'meta.structure.dictionary.value.json'
        'patterns': [
          {
            'include': '#comments'
          }
          {
            'comment': 'the JSON object value'
            'include': '#value'
          }

        ]
      }
      {
        'match': '[^\\s\\}]'
        'name': 'invalid.illegal.expected-dictionary-separator.json'
      }

    ]


  'string-quoted':
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.json'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.json'
    'name': 'string.quoted.double.json'
    'patterns': [
      {
        'match': '(?x:                # turn on extended mode\n                     \\\\                # a literal backslash\n                     (?:               # ...followed by...\n                       ["\\\\/bfnrt]     # one of these characters\n                       |               # ...or...\n                       u               # a u\n                       [0-9a-fA-F]{4}  # and four hex digits\n                     )\n                   )'
        'name': 'constant.character.escape.json'
      }
      {
        'match': '\\\\.'
        'name': 'invalid.illegal.unrecognized-string-escape.json'
      }
    ]

  'string-simple':
    'comment': 'the quoted_string or simple string'
    'name': 'string.quoted.double.json'
    'match': '([a-zA-Z]|&)([a-zA-Z0-9\\.]|\\(|\\))*'


  'string':
    'comment': 'the quoted_string or simple string'
    'patterns': [
      {
        'include': '#string-simple'
      }
      {
        'include': '#string-quoted'
      }
    ]
  'value':
    'comment': 'the \'value\' diagram at http://json.org'
    'patterns': [
      {
        'include': '#named_value'
      }
      {
        'include': '#constant'
      }
      {
        'include': '#number'
      }
      {
        'include': '#array'
      }
      {
        'include': '#object'
      }
      {
        'include': '#string'
      }
    ]
  'comments':
    'patterns': [
      {
        'match': '//.*'
        'name': 'comment.single.json'
      }
      {
        'begin': '/\\*\\*(?!/)'
        'captures':
          '0':
            'name': 'punctuation.definition.comment.json'
        'end': '\\*/'
        'name': 'comment.block.documentation.json'
      }
      {
        'begin': '/\\*'
        'captures':
          '0':
            'name': 'punctuation.definition.comment.json'
        'end': '\\*/'
        'name': 'comment.block.json'
      }
    ]
'scopeName': 'source.json'
